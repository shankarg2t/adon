<?php
//SCP: This is part of the Custom Option AJAX response - it shows custom options for 'associated' products.

//opConfig is forced into global scope even if pulled in via ajax (by using window.)
//and also ensure correct form encoding
?>
<script type="text/javascript">
    //<![CDATA[
    try{window.opConfig = new Product.Options(<?php echo $this->getJsonConfig() ?>);}catch(e){}
    $('product_addtocart_form').encoding = 'multipart/form-data';
    //]]>
</script>
<?php
/**
 * MageWorx
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the MageWorx EULA that is bundled with
 * this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.mageworx.com/LICENSE-1.0.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to http://www.mageworx.com/ for more information
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @copyright  Copyright (c) 2012 MageWorx (http://www.mageworx.com/)
 * @license    http://www.mageworx.com/LICENSE-1.0.html
 */
/**
 * Advanced Product Options extension
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @author     MageWorx Dev Team
 */
$_options = Mage::helper('core')->decorateArray($this->getOptions());
if (count($_options)) {
    ?>
    <script type="text/javascript">
        //<![CDATA[
        var optionFileUpload = {
            productForm : $('product_addtocart_form'),
            formAction : '',
            formElements : {},
            upload : function(element){
                this.formElements = this.productForm.getElementsBySelector('input', 'select', 'textarea', 'button');
                this.removeRequire(element.readAttribute('id').sub('option_', ''));

                template = '<iframe id="upload_target" name="upload_target" style="width:0; height:0; border:0;"><\/iframe>';

                Element.insert($('option_'+element.readAttribute('id').sub('option_', '')+'_uploaded_file'), {after: template});

                this.formAction = this.productForm.action;
                this.productForm.action = '<?php echo $this->getUrl('*/product/upload') ?>option_id/'+element.readAttribute('id').sub('option_', '');
                this.productForm.target = 'upload_target';
                this.productForm.submit();
                this.productForm.target = '';
                this.productForm.action = this.formAction;
            },
            removeRequire: function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('id') != 'option_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='disabled';
                    }
                }
            },
            addRequire: function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('name') != 'options_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='';
                    }
                }
            },
            uploadCallback: function(data){
                this.addRequire(data.optionId);
                $('upload_target').remove();

                if (data.error) {

                } else {
                    $('option_'+data.optionId+'_uploaded_file').value = data.fileName;
                    $('option_'+data.optionId+'_file').value = '';
                    $('option_'+data.optionId+'_file').hide();
                    $('option_'+data.optionId+'').hide();
                    template = '<div id="option_'+data.optionId+'_file_box"><a href="#"><img src="var/options/'+data.fileName+'"><\/a><a href="#" onclick="optionFileUpload.removeFile('+data.optionId+')">Remove file<\/a>';

                    Element.insert($('option_'+data.optionId+'_uploaded_file'), {after: template});
                }
            },
            removeFile: function(optionId) {
                $('option_'+optionId+'_uploaded_file').value= '';
                $('option_'+optionId+'_file').show();
                $('option_'+optionId+'').show();

                $('option_'+optionId+'_file_box').remove();
            }
        };
        var optionTextCounter = {
            count : function(field,cntfield,maxlimit){
                if (field.value.length > maxlimit){
                    field.value = field.value.substring(0, maxlimit);
                } else {
                    cntfield.innerHTML = maxlimit - field.value.length;
                }
            }
        };

        Product.Options = Class.create();
        Product.Options.prototype = {
            initialize : function(config){
                this.config = config;
                this.reloadPrice();
            },
            reloadPrice : function(){
                var price = 0;
                var config = this.config;
                var skipIds = [];
                $$('.product-custom-option').each(function(element){
                    var optionId = 0;
                    element.name.sub(/[0-9]+/, function(match){
                        optionId = match[0];
                    });
                    if (config[optionId]) {
                        var configOptions = config[optionId];
                        if (element.type == 'radio') {
                            if (element.checked && typeof(configOptions[element.getValue()])!='undefined') {
                                if ($('options_'+optionId+'_qty')) optionQty = parseInt($('options_'+optionId+'_qty').value); else optionQty = 1;
                                if (typeof(configOptions[element.getValue()]['price'])!='undefined') {
                                    price += parseFloat(config[optionId][element.getValue()]['price']) * optionQty;
                                } else {
                                    price += parseFloat(config[optionId][element.getValue()]) * optionQty;
                                }
                            }
                        } else if(element.type == 'checkbox') {
                            if (element.checked && typeof(configOptions[element.getValue()])!='undefined') {                                
                                if ($('options_'+optionId+'_'+element.value+'_qty')) optionQty = parseInt($('options_'+optionId+'_'+element.value+'_qty').value); else optionQty = 1;
                                if (typeof(configOptions[element.getValue()]['price'])!='undefined') {
                                    price += parseFloat(configOptions[element.getValue()]['price']) * optionQty;
                                } else {
                                    price += parseFloat(configOptions[element.getValue()]) * optionQty;
                                }
                            }
                        } else if(element.hasClassName('datetime-picker') && !skipIds.include(optionId)) {
                            dateSelected = true;
                            $$('.product-custom-option[id^="options_' + optionId + '"]').each(function(dt){
                                if (dt.getValue() == '') {
                                    dateSelected = false;
                                }
                            });
                            if (dateSelected) {
                                if (typeof(configOptions['price'])!='undefined') {
                                    price += parseFloat(configOptions['price']);
                                } else {
                                    price += parseFloat(configOptions);
                                }
                                skipIds[optionId] = optionId;
                            }
                        } else if(element.type == 'select-one') {
                            if (element.options) {
                                // qty 
                                if ($('options_'+optionId+'_qty')) optionQty = parseInt($('options_'+optionId+'_qty').value); else optionQty = 1;
                                $A(element.options).each(function(selectOption){
                                    if (selectOption.selected && typeof(configOptions[selectOption.value])!='undefined') {
                                        if (typeof(configOptions[selectOption.value]['price'])!='undefined') {
                                            price += parseFloat(configOptions[selectOption.value]['price']) * optionQty;
                                        } else {
                                            price += parseFloat(configOptions[selectOption.value]) * optionQty;
                                        }
                                    }
                                });
                            }
                        } else if(element.type == 'select-multiple') {                            
                            if (element.options) {
                                $A(element.options).each(function(selectOption){
                                    if (selectOption.selected && typeof(configOptions[selectOption.value])!='undefined') {
                                        if (typeof(configOptions[selectOption.value]['price'])!='undefined') {
                                            price += parseFloat(configOptions[selectOption.value]['price']);
                                        } else {
                                            price += parseFloat(configOptions[selectOption.value]);
                                        }
                                    }
                                });
                            }
                        } else {
                            if (element.getValue().strip()!='') {
                                if (typeof(configOptions['price'])!='undefined') {
                                    price += parseFloat(configOptions['price']);
                                } else {
                                    price += parseFloat(configOptions);
                                }
                            }
                        }
                    }
                });
                try {
    <?php if (Mage::helper('customoptions')->isAbsolutePricesEnabled()) { ?>
                        if (price>0) optionsPrice.productPrice = 0; else optionsPrice.productPrice = optionsPrice.productOldPrice;
    <?php } ?>
                    optionsPrice.changePrice('options', price);
                    optionsPrice.reload();
                } catch (e) {

                }
                adonUpdateTierPrice();
            }
        };
        function validateOptionsCallback(elmId, result){
            var container = $(elmId).up('ul.options-list');
            if (result == 'failed') {
                $(container).removeClassName('validation-passed');
                $(container).addClassName('validation-failed');
            } else {
                $(container).removeClassName('validation-failed');
                $(container).addClassName('validation-passed');
            }
        }
        var opConfig = new Product.Options(<?php echo $this->getJsonConfig() ?>);
        var valueId, optionId;
        var enableAll = false;
        var inputs = new Array();
        function nodeAnalysis (currentNode) {
            var name = currentNode.nodeName.toLowerCase();
            switch (name)
            {
                case 'option' :
                    inputs.push(currentNode);
                    break;
                case 'input' :
                    if (currentNode.type=='checkbox' || currentNode.type=='radio') {
                        inputs.push(currentNode);
                    }
                    break;
                default : break;
            }
            for (var i = 0; i < currentNode.childNodes.length; i++) {
                if (currentNode.childNodes[i].nodeType == 1) {
                    nodeAnalysis(currentNode.childNodes[i]);
                }
            }
        }
                        
                        
        // set qty product from option
        var optionsSetQtyProductData = [];
        var optionsSetQtyProduct = {
            defaultQty: 1,
            pricePerUnit: 0,
            setQty: function(optionId) {                
                if (!$('qty')) {
                    setTimeout('optionsSetQtyProduct.setQty('+optionId+')', 500);
                    return;
                }
                var el = $('select_' + optionId);
                if (!el) el = $$("input[id^='options_"+optionId+"_']:checked").first();
                if (!el) return;                
                if (!optionsSetQtyProductData[optionId]) return;
                if (!optionsSetQtyProductData[optionId][el.value]) {
                    if (this.defaultQty!=$('qty').value) this.setTotalQty(this.defaultQty);
                    return;
                }                                
                if ($('options_'+optionId+'_qty')) var optionQty = parseInt($('options_'+optionId+'_qty').value); else var optionQty = 1;
                this.setTotalQty(optionsSetQtyProductData[optionId][el.value] * optionQty);
            },
            setTotalQty: function(qty) {
                pricePerUnit = optionsPrice.productOldPrice + optionsPrice.getOptionPrices().first();
                $('qty').value = qty;
                optionsPrice.productPrice = pricePerUnit * qty;
                optionsPrice.reload();
                //var elPrice = $$('span.price').first();
                //if (elPrice) {
                //    var priceArr = elPrice.innerHTML.split("&nbsp;");
                //    elPrice.innerHTML = optionsPrice.productPrice + "&nbsp;" + priceArr[1];
                //}
            },
            hideQty: function() {
                if (!$('qty')) {
                    setTimeout('optionsSetQtyProduct.hideQty()', 100);
                    return;
                }                
                //$('qty').previous('label').style.visibility = 'hidden';
                //$('qty').style.visibility = 'hidden';
                $('qty').writeAttribute('readonly', 'readonly');
            }
        };
                        
                        
        // images block
        var optionsImagesData = [];
        var optionsImages = {        
            // up to 50 IMGs
            showImage: function(selectId) {        
                var el = $('select_' + selectId);
                if (!el) return;
                var elValueArr = [];                    
                if (el.multiple) {
                    for (i=0; i < el.options.length; i++) {
                        if (el.options[i].selected) elValueArr.push(el.options[i].value);
                    }                                        
                } else {
                    elValueArr.push(el.value);
                }


                $$("a[id^='customoptions_image_" + selectId + "']").each(function(element){
                    element.hide(); 
                });

                for (i=0; i < elValueArr.length; i++) {
                    optionValueId = elValueArr[i];
                    if (optionValueId != '') {
                        if ($('customoptions_image_' + selectId + '_' + optionValueId) != null) {
                            $('customoptions_image_' + selectId + '_' + optionValueId).show();
                        }
                    }
                }        
            },

            // more than 50 IMGs
            setImage: function(selectId) {
                var el = $('select_' + selectId);        
                if (!el) return;

                $$("a[id^='customoptions_image_" + selectId + "']").each(function(element){
                    element.hide(); 
                });

                if (!optionsImagesData[selectId]) return;
                if (!optionsImagesData[selectId][el.value]) return;

                var imgbox = $('customoptions_image_' + selectId);
                if (!imgbox) return;            

                imgbox.show();
                imgbox.href = optionsImagesData[selectId][el.value][1];
                var img = imgbox.down('img');
                if (!img) return;
                img.src = optionsImagesData[selectId][el.value][0];
            }
        };
                        
        Event.observe(window, 'load', function() {
            opConfig.reloadPrice();
        });
                        
                        
                        
    <?php if (Mage::helper('customoptions')->isDependentEnabled()) { ?>
            var dependentData = [];
            var inGroupIdData = [];
            var dependentChanges = [];
            var dependentHide = <?php if (Mage::helper('customoptions')->hideDependentOption()) echo 'true'; else echo 'false'; ?>;
            var dependentDefault = [];        

            var dependentOptions = {            
                select: function(el) {
                    this.returnSelect(el);
                    if (el.type && el.type=='checkbox' && !el.checked) return false;                    
                    if (el.value>0) { //&& dependentData[el.value]
                        // prepare value
                        var elValueArr = [];                    
                        if (el.multiple) {
                            for (i=0; i < el.options.length; i++) {
                                if (el.options[i].selected) elValueArr.push(el.options[i].value);
                            }                                        
                        } else {
                            elValueArr.push(el.value);
                        }
                        elementIds = [];
                        for (i=0; i < elValueArr.length; i++) {
                            if (!dependentData[elValueArr[i]]) continue;                            
                            dependentData[elValueArr[i]].each(function(IGI){
                                if (inGroupIdData[IGI]) {
                                    for(var elementId in inGroupIdData[IGI]) {
                                        if (elementId!='disabled' && $(elementId)) {
                                            if (!elementIds[elementId]) {
                                                var elPreparedName = dependentOptions.prepareElName(el);
                                                if (!dependentChanges[elPreparedName]) dependentChanges[elPreparedName] = [];
                                                if (!dependentChanges[elPreparedName][elementId]) dependentChanges[elPreparedName][elementId] = [];

                                                if (inGroupIdData[IGI].disabled) {
                                                    if (!inGroupIdData[IGI].out_of_stock) $(elementId).disabled = false;
                                                    if (dependentHide) {                                                        
                                                                                        
                                                        if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                                                            $(elementId).up('li').style.display = 'block';
                                                        }                                                        
                                                        dependentOptions.upDiv($(elementId)).style.display = 'block';
                                                                                        
                                                    }
                                                    dependentChanges[elPreparedName][elementId]['disabled'] = true;

                                                    isRequire = $(elementId).hasClassName('required-dependent');
                                                    if (isRequire) {
                                                        $(elementId).removeClassName('required-dependent');
                                                        if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                                                            $(elementId).addClassName('validate-one-required-by-name');
                                                        } else {
                                                            $(elementId).addClassName('required-entry');
                                                        }    
                                                    }
                                                    dependentChanges[elPreparedName][elementId]['is_require'] = isRequire;
                                                }

                                                if (inGroupIdData[IGI][elementId] && inGroupIdData[IGI][elementId][1] && $(elementId)) {
                                                    // if select
                                                    elSelect = $(elementId);
                                                    //if (!dependentChanges[elPreparedName][elementId]['html']) dependentChanges[elPreparedName][elementId]['html'] = $(elementId).innerHTML;
                                                    if (!dependentChanges[elPreparedName][elementId]['options']) {
                                                        dependentChanges[elPreparedName][elementId]['options'] = [];                                                    
                                                        for (ii=0; ii < elSelect.options.length; ii++) {                                                        
                                                            if (elSelect.options[ii].value) dependentChanges[elPreparedName][elementId]['options'][elSelect.options[ii].value] = [elSelect.options[ii].text,elSelect.options[ii].selected,elSelect.options[ii].disabled];
                                                        }
                                                    }    


                                                    if (elSelect.multiple) elSelect.length = 0; else elSelect.length = 1; // clear select
                                                }    
                                                elementIds[elementId] = true;
                                            }    
                                            if (inGroupIdData[IGI][elementId] && inGroupIdData[IGI][elementId][1]) {
                                                // if select
                                                var newOpt = new Option(inGroupIdData[IGI][elementId][1], inGroupIdData[IGI][elementId][0]);
                                                if (!inGroupIdData[IGI][elementId][2]) newOpt.disabled = true;

                                                // set children default
                                                if (dependentDefault[elementId] && 
                                                    (inGroupIdData[IGI][elementId][0]==dependentDefault[elementId]) // select-one
                                                    || ($(elementId).type=='select-multiple' && dependentDefault[elementId][inGroupIdData[IGI][elementId][0]])
                                            ) {
                                                    newOpt.selected = true;
                                                    setTimeout('dependentOptions.select($("'+elementId+'"));', '100');
                                                }
                                                $(elementId).options.add(newOpt);
                                                                                
                                            } else if (dependentDefault[elementId] && ($(elementId).type=='checkbox' || $(elementId).type=='radio')) {
                                                $(elementId).click();
                                            }
                                        }
                                    }                                                
                                }

                            });
                        }    
                    }
                },

                // return default options params
                returnSelect: function(el) {
                    var elPreparedName = dependentOptions.prepareElName(el);
                    if (dependentChanges[elPreparedName] && !dependentChanges[elPreparedName]['isUsed']) {
                        dependentChanges[elPreparedName]['isUsed'] = true;
                        for(var elementId in dependentChanges[elPreparedName]) {
                            if (!dependentChanges[elPreparedName].hasOwnProperty(elementId) || elementId=='isUsed') continue;
                            if (dependentChanges[elPreparedName][elementId]['disabled']) {
                                $(elementId).disabled = true;
                                if (dependentHide) {
                                    if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                                        $(elementId).up('li').style.display = 'none';
                                    } 
                                    this.upDiv($(elementId)).style.display = 'none';
                                }


                                if (dependentChanges[elPreparedName][elementId]['is_require']) {                                
                                    if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                                        $(elementId).removeClassName('validate-one-required-by-name');
                                    } else {
                                        $(elementId).removeClassName('required-entry');
                                    }                                
                                    $(elementId).addClassName('required-dependent');
                                }
                            }
                            if (($(elementId).type=='checkbox' || $(elementId).type=='radio') && $(elementId).checked) {
                                $(elementId).checked = false;
                                dependentOptions.returnSelect($(elementId));
                            } else if ($(elementId).type=='select-one' || $(elementId).type=='select-multiple') {
                                dependentOptions.returnSelect($(elementId));
                            } else if ($(elementId).type=='text' || $(elementId).type=='textarea' || $(elementId).type=='file') {
                                $(elementId).value = '';
                            }
                            if (dependentChanges[elPreparedName][elementId]['options']) {
                                if ($(elementId).multiple) $(elementId).length = 0; else $(elementId).length = 1; // clear select                                
                                for(var opValue in dependentChanges[elPreparedName][elementId]['options']) {
                                    if (!dependentChanges[elPreparedName][elementId]['options'].hasOwnProperty(opValue)) continue;                                
                                    var newOpt = new Option(dependentChanges[elPreparedName][elementId]['options'][opValue][0], opValue);
                                    if (dependentChanges[elPreparedName][elementId]['options'][opValue][1]) newOpt.selected = true;
                                    if (dependentChanges[elPreparedName][elementId]['options'][opValue][2]) newOpt.disabled = true;
                                    $(elementId).options.add(newOpt);
                                }
                            }
                        }
                        delete dependentChanges[elPreparedName];
                    }    
                },
                // for ie to work
                upDiv: function(el) {            
                    if (el.type=='checkbox' || el.type=='radio') return el.up(3); else return el.up('div');                    
                },
                prepareElName: function(el) {            
                    if (el.type && el.type=='checkbox') {
                        var idArr = el.id.split('_');
                        return el.name.replace('[]','').replace('[','-').replace(']','') + '-' + idArr[idArr.length-1];
                    } else {
                        return el.name.replace('[]','').replace('[','-').replace(']','');
                    }    
                }
            }
    <?php } ?>        
                        
        //]]>
    </script>
    <?php $isFirstOption = true; ?>
    <?php $i = 0; ?>
    <?php $tabcount = 0; ?>
    <?php 
          $optionItemPers = $this->__('Personalization');
          $optionItemPkg = $this->__('Packing');
          $optionItemAcc = $this->__('Accessories');
          $optionItemSvc = $this->__('Services');
    ?>
    <div id="pantoneval">
        <?php foreach ($_options as $_option): ?>
                    <?php if (strpos($this->getOptionHtml($_option, $isFirstOption), 'Pantone')): ?>
                        <?php echo '<div id="customOptionsTabPantone">' . $this->getOptionHtml($_option, $isFirstOption) . '</div>' ?>
                    <?php endif; ?>
                <?php endforeach; ?>  
    </div>
    <dl><div id="easyCustomOptionsTabs">
            <ul class="customOptionsTabs">
                <?php foreach ($_options as $_option): ?>
                    <?php if (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemPers) && $i == 0): ?>
                        <li class="customOptionsTab" id="tab<?php echo $tabcount++; ?>"><a class="greyButton" href="#customOptionsTabPers"><?php echo $optionItemPers ?></a></li>
                        <?php $i = 1; ?>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemPkg)): ?>
                        <li class="customOptionsTab" id="tab<?php echo $tabcount++; ?>"><a class="greyButton" href="#customOptionsTabPacking"><?php echo $optionItemPkg ?></a></li>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemAcc)): ?>
                        <li class="customOptionsTab" id="tab<?php echo $tabcount++; ?>"><a class="greyButton" href="#customOptionsTabAccessoires"><?php echo $optionItemAcc ?></a></li>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemSvc)): ?>
                        <li class="customOptionsTab" id="tab<?php echo $tabcount++; ?>"><a class="greyButton" href="#customOptionsTabServices"><?php echo $optionItemSvc ?></a></li>
                    <?php endif; ?>
                <?php endforeach; ?>
            </ul>
            <div id="easyCustomOptionsPanel">
                <?php $i1 = 0; ?>
                <?php foreach ($_options as $_option): ?>
                    <?php if (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemPers) && $i1 == 0): ?>
                        <div id="customOptionsTabPers">
                            <?php foreach ($_options as $_option): ?>
                                <?php if (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemPers)): ?>
                                    <?php echo $this->getOptionHtml($_option, $isFirstOption) ?>
                                <?php endif; ?>
                            <?php endforeach; ?>
                        </div>
                        <?php $i1 = 1; ?>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemPkg)): ?>
                        <?php echo '<div id="customOptionsTabPacking">' . $this->getOptionHtml($_option, $isFirstOption) . '</div>' ?>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemAcc)): ?>
                        <?php echo '<div id="customOptionsTabAccessoires">' . $this->getOptionHtml($_option, $isFirstOption) . '</div>' ?>
                    <?php elseif (strpos($this->getOptionHtml($_option, $isFirstOption), $optionItemSvc)): ?>
                        <?php echo '<div id="customOptionsTabServices">' . $this->getOptionHtml($_option, $isFirstOption) . '</div>' ?>
                    <?php endif; ?>
                <?php endforeach; ?>    
            </div>
        </div>
    </dl>
    <?php if (Mage::helper('customoptions')->isDependentEnabled()) { ?>    
        <script type="text/javascript">
            // apply edit or options default
            $$("select[id^='select_']").each(function(element){
                element.onchange();
            });
                                            
            for(var elementId in dependentDefault) {
                if (!dependentDefault.hasOwnProperty(elementId)) continue;
                if ($(elementId) && dependentOptions.upDiv($(elementId)) && dependentOptions.upDiv($(elementId)).style.display!="none") {                    
                    dependentOptions.returnSelect($(elementId));
                    if ($(elementId).type=='select-one' || $(elementId).type=='text' || $(elementId).type=='textarea') {
                        $(elementId).value = dependentDefault[elementId];
                    } else if ($(elementId).type=='select-multiple') {
                        el = $(elementId);
                        for (i=0; i < el.options.length; i++) {
                            if (dependentDefault[elementId][el.options[i].value]) el.options[i].selected = true;
                        }
                    } else if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                        if ($(elementId).checked!=true) $(elementId).click();
                    }    
                    dependentOptions.select($(elementId));
                }
            }
        </script>
    <?php } ?>    
<?php } ?>
